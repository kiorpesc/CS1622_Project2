package com.quadworkshop.kiorpesc;

// CUP specification for a simple expression evaluator (w/ actions)
import java.util.HashMap;
import java_cup.runtime.Symbol;

/* Preliminaries to set up and use the scanner.  */
/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};

parser code {:
    boolean parsing_failed = false;
    int lineCount = 0;

    HashMap<String, Integer> labelLocs = new HashMap<String, Integer>();
    HashMap<String, Integer> idLocs = new HashMap<String, Integer>();
    HashMap<Integer, String> memoryMap = new HashMap<Integer, String>();

    Lexer lexer;
        public StringBuilder MIPSOutput;

    public MIPSParser(Lexer lex) {
        super(lex);
        lexer = lex;
        MIPSOutput = new StringBuilder();
    }

    public void addLabelStart(String label) {
        //MIPSOutput.append(label);
        String stripped = label.substring(0, label.length() - 1);
        labelLocs.put(stripped, lineCount);  // FORCES ZERO-INDEXING OF LINES
    }

    // if the id passed in already exists in the lookup map, it will be handled now.
    // otherwise, it will be handled on pass 2, after all labels are resolved to line numbers
    public void addLabelEnd(String id) {
        if(labelLocs.keySet().contains(id)){
            MIPSOutput.delete(MIPSOutput.length() - 5, MIPSOutput.length()); // remove new line and the four trailing zeros
            StringBuilder addrHex = new StringBuilder(Integer.toHexString(labelLocs.get(id)));
            while(addrHex.length() < 4){
                addrHex.insert(0, 0);
            }
            MIPSOutput.append(addrHex);
        } else {
            MIPSOutput.deleteCharAt(MIPSOutput.length() - 1);
            MIPSOutput.append(":");
            MIPSOutput.append(id);
        }
        MIPSOutput.append("\n");
        //idLocs.put(id, lineCount - 1);
    }

    public void addHexInstruction(int instruction){
        String output = Integer.toHexString(instruction);
        StringBuilder zeros = new StringBuilder("0x");
        for(int i = 8 - output.length(); i > 0; i--) {
            zeros.append("0");
        }
        zeros.append(output);
        MIPSOutput.append(zeros);
        MIPSOutput.append("\n");
        lineCount++;
        //System.out.println(zeros.toString());
    }

    public int constructRType(Object func, Object rs, Object rt, Object rd){
        int s = ((Integer)rs).intValue();
        int t = ((Integer)rt).intValue();
        int d = ((Integer)rd).intValue();
        int fun = ((Integer)func).intValue();
        int instruction = s << 21;
        instruction = instruction | t << 16;
        instruction = instruction | d << 11;
        instruction = instruction | fun;

        return instruction;
    }

    public int constructRType(Object func, Object rs){
        int s = ((Integer)rs).intValue();
        int t = 0;
        int d = 0;
        int fun = ((Integer)func).intValue();
        int instruction = s << 21;
        instruction = instruction | t << 16;
        instruction = instruction | d << 11;
        instruction = instruction | fun;

        return instruction;
    }

    public int constructRType(Object func){
        int s = 0;
        int t = 0;
        int d = 0;
        int fun = ((Integer)func).intValue();
        int instruction = s << 21;
        instruction = instruction | t << 16;
        instruction = instruction | d << 11;
        instruction = instruction | fun;

        return instruction;
    }

    public int constructIType(Object opc, Object rs, Object rt, Object literal) {
        int s = ((Integer)rs).intValue();
        int t = ((Integer)rt).intValue();
        int op = ((Integer)opc).intValue();
        int lit = ((Integer)literal).intValue();
        int instruction = op << 26;
        instruction = instruction | (s << 21);
        instruction = instruction | (t << 16);
        instruction = instruction | lit;

        return instruction;
    }

    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        parsing_failed = true;
        System.err.println("Syntax error " + cur_token.toString()
            + " Got: " + cur_token.toString());
    }

    public boolean hasFailed() { return parsing_failed;}
:};

/* Terminals (tokens returned by the scanner). */
terminal           DATA_SECTION, TEXT_SECTION, R_TYPE, I_TYPE, J_TYPE, REGISTER;
terminal           LABEL, IDENT, TYPE, EOL;
terminal Integer   INTEGER_LITERAL;
terminal String     STRING_LITERAL;

/* Non-terminals */
non terminal            program;
non terminal            section_list;
non terminal            expr_list, expr, r_expr, i_expr, j_expr, decl;

/* Precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
*/

start with program;

/* The grammar */
program ::=         section_list
                {: /*System.out.println("SECTION LIST");*/ :}
                ;
section_list ::=    DATA_SECTION EOL expr_list TEXT_SECTION EOL expr_list
                |
                    expr_list
                ;
expr_list ::=       expr_list expr EOL
                {:  /*System.out.println("Got to expr_list"); */  :}
                |
                    expr_list expr
                |
                ;
expr ::=            r_expr:out
                |
                    i_expr
                |
                    j_expr
                |
                    decl
                |
                    LABEL:lab EOL
                {:  parser.addLabelStart((String)lab); :}
                ;
r_expr ::=          R_TYPE:func REGISTER:rd REGISTER:rs REGISTER:rt
                {:
                    int instruction = parser.constructRType(func, rs, rt, rd);
                    parser.addHexInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    R_TYPE:func REGISTER:rs
                {:
                    int instruction = parser.constructRType(func, rs);
                    parser.addHexInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    R_TYPE:func
                {:
                    int instruction = parser.constructRType(func);
                    parser.addHexInstruction(instruction);
                    RESULT = instruction;
                :}
                ;
i_expr ::=          I_TYPE:op REGISTER:rt REGISTER:rs INTEGER_LITERAL:imm
                {:
                    int instruction = parser.constructIType(op, rs, rt, imm);
                    parser.addHexInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    I_TYPE:op REGISTER:rt REGISTER:rs IDENT:id
                {:
                    int instruction = parser.constructIType(op, rs, rt, new Integer(0));
                    parser.addHexInstruction(instruction);
                    parser.addLabelEnd((String)id);
                    RESULT = instruction;
                :}
                |
                    I_TYPE:op REGISTER:rt INTEGER_LITERAL:imm REGISTER:rs
                {:
                    int instruction = parser.constructIType(op, rs, rt, imm);
                    parser.addHexInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    I_TYPE:op REGISTER:rt IDENT:id
                {:
                    int instruction = parser.constructIType(op, new Integer(0), rt, new Integer(0));
                    parser.addHexInstruction(instruction);
                    parser.addLabelEnd((String)id);
                    RESULT = instruction;
                :}
                ;
j_expr ::=          J_TYPE INTEGER_LITERAL:addr
                |
                    J_TYPE IDENT
                ;
decl ::=            TYPE STRING_LITERAL
                ;