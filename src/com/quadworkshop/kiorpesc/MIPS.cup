package com.quadworkshop.kiorpesc;

// CUP specification for a simple expression evaluator (w/ actions)
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/* Preliminaries to set up and use the scanner.  */
/* Preliminaries to use the scanner.  */
scan with {: return lexer.next_token(); :};

parser code {:
    boolean parsing_failed = false;
    int lineCount = 0;
    int errorCount = 0;
    int sixteenBitMask = 0x0FFFF;
    int twentySixBitMask = 0x03FFFFFF;
    boolean labelNextLine = false;
    String currentLabel = "";

    HashMap<String, Integer> labelLocs = new HashMap<String, Integer>();
    HashMap<String, Integer> idLocs = new HashMap<String, Integer>();
    HashMap<String, Integer> memoryMap = new HashMap<String, Integer>();
    int memOffset = 0;  // how many words into memory are we?
    int memStart = 0x10010000;
    int textStart = 0x00400000;

    Lexer lexer;
    public boolean inDataSec;
    public ArrayList<Instruction> abstractSyntaxList;
    public ArrayList<Declaration> declarationList;

    public MIPSParser(Lexer lex) {
        super(lex);
        lexer = lex;
        abstractSyntaxList = new ArrayList<Instruction>();
        declarationList = new ArrayList<Declaration>();
    }

    public void addLabelStart(String label) {
        //MIPSOutput.append(label);
        String stripped = label.substring(0, label.length() - 1);
        labelLocs.put(stripped, lineCount);  // FORCES ZERO-INDEXING OF LINES
        labelNextLine = true;
        currentLabel = label;
    }

    public void addLabelEnd(String id) {
        Instruction current = abstractSyntaxList.get(abstractSyntaxList.size() - 1);
        current.addId(id);
        idLocs.put(id, lineCount - 1);
    }

    // add the instruction to the list
    public void addInstruction(Instruction instruction) {
        abstractSyntaxList.add(instruction);
        lineCount++;
    }

    public Instruction constructRType(Object func, Object rs, Object rt, Object rd){
        int s = ((Integer)rs).intValue();
        int t = ((Integer)rt).intValue();
        int d = ((Integer)rd).intValue();
        int fun = ((Integer)func).intValue();
        int instruction = s << 21;
        instruction = instruction | t << 16;
        instruction = instruction | d << 11;
        instruction = instruction | fun;
        Instruction result;

        if(labelNextLine){
            result = new Instruction('r', instruction, lineCount, currentLabel);
            labelNextLine = false;
        } else {
            result = new Instruction('r', instruction, lineCount);
        }

        return result;
    }

    public Instruction constructRType(Object func, Object rs){
        int s = ((Integer)rs).intValue();
        int t = 0;
        int d = 0;
        int fun = ((Integer)func).intValue();
        int instruction = s << 21;
        instruction = instruction | t << 16;
        instruction = instruction | d << 11;
        instruction = instruction | fun;

        Instruction result;

        if(labelNextLine){
            result = new Instruction('r', instruction, lineCount, currentLabel);
            labelNextLine = false;
        } else {
            result = new Instruction('r', instruction, lineCount);
        }
        return result;
    }

    public Instruction constructRType(Object func){
        int s = 0;
        int t = 0;
        int d = 0;
        int fun = ((Integer)func).intValue();
        int instruction = s << 21;
        instruction = instruction | t << 16;
        instruction = instruction | d << 11;
        instruction = instruction | fun;

        Instruction result;

        if(labelNextLine){
            result = new Instruction('r', instruction, lineCount, currentLabel);
            labelNextLine = false;
        } else {
            result = new Instruction('r', instruction, lineCount);
        }

        return result;
    }

    public Instruction constructIType(Object opc, Object rs, Object rt, Object literal) {
        int s = ((Integer)rs).intValue();
        int t = ((Integer)rt).intValue();
        int op = ((Integer)opc).intValue();
        Integer litInt = (Integer) literal;
        int lit = ((Integer)literal).intValue();
        if(lit > 32767 || lit < -32768) {
            System.out.println("ERROR: Integer literal greater than 16 bits: instruction " + lineCount);
            errorCount++;
            lit = 0x0000;
        } else {
            lit = lit & sixteenBitMask;
        }
        int instruction = op << 26;
        instruction = instruction | (s << 21);
        instruction = instruction | (t << 16);
        instruction = instruction | lit;

        Instruction result;

        if(labelNextLine){
            result = new Instruction('i', instruction, lineCount, currentLabel);
            labelNextLine = false;
        } else {
            result = new Instruction('i', instruction, lineCount);
        }
        return result;
    }

    public Instruction constructJType(Object opc, Integer imm) {
        int op = ((Integer)opc).intValue();
        int addr = imm.intValue();
        if(addr > 33554431 || addr < -33554432) {
            addr = 0x0000;
            errorCount++;
            System.out.println("ERROR: Address value too large: instruction " + (lineCount));
        }
        int instruction = op << 26;
        addr = addr & twentySixBitMask;
        instruction = instruction | addr;

        Instruction result;

        if(labelNextLine){
            result = new Instruction('j', instruction, lineCount, currentLabel);
            labelNextLine = false;
        } else {
            result = new Instruction('j', instruction, lineCount);
        }
        return result;
    }

    public void constructDeclaration(String lab, Object type, String str) {
        int bytes = str.length() + 1;
        int words = bytes / 4;
        if(bytes % 4 != 0) {
            words += 1;
        }

        declarationList.add(new Declaration(lab, memOffset, str));
        memoryMap.put(lab.substring(0, lab.length()-1), memOffset);
        memOffset += words;
    }

    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        parsing_failed = true;
        System.err.println("Syntax error " + cur_token.toString()
            + " Got: " + cur_token.toString());
    }

    public boolean hasFailed() { return parsing_failed;}
:};

/* Terminals (tokens returned by the scanner). */
terminal           DATA_SECTION, TEXT_SECTION, R_TYPE, I_TYPE, J_TYPE, REGISTER;
terminal           LABEL, IDENT, TYPE, EOL;
terminal Integer   INTEGER_LITERAL;
terminal String     STRING_LITERAL;

/* Non-terminals */
non terminal            program;
non terminal            section_list, section;
non terminal            expr_list, expr, r_expr, i_expr, j_expr, decl_list, decl;

/* Precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
*/

start with program;

/* The grammar */
program ::=         section_list
                {: /*System.out.println("SECTION LIST");*/ :}
                ;
section_list ::=    section section
                |
                    expr_list
                ;
section ::=         DATA_SECTION EOL decl_list
                |
                    TEXT_SECTION EOL expr_list
                ;
expr_list ::=       expr_list expr EOL
                {:  /*System.out.println("Got to expr_list"); */  :}
                |
                    expr_list expr
                |
                ;
expr ::=            r_expr:out
                |
                    i_expr
                |
                    j_expr
                |
                    LABEL:lab EOL
                {:  parser.addLabelStart((String)lab); :}
                ;
r_expr ::=          R_TYPE:func REGISTER:rd REGISTER:rs REGISTER:rt
                {:
                    Instruction instruction = parser.constructRType(func, rs, rt, rd);
                    parser.addInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    R_TYPE:func REGISTER:rs
                {:
                    Instruction instruction = parser.constructRType(func, rs);
                    parser.addInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    R_TYPE:func
                {:
                    Instruction instruction = parser.constructRType(func);
                    parser.addInstruction(instruction);
                    RESULT = instruction;
                :}
                ;
i_expr ::=          I_TYPE:op REGISTER:rt REGISTER:rs INTEGER_LITERAL:imm
                {:
                    Instruction instruction = parser.constructIType(op, rs, rt, imm);
                    parser.addInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    I_TYPE:op REGISTER:rt REGISTER:rs IDENT:id
                {:
                    Instruction instruction = parser.constructIType(op, rs, rt, new Integer(0));
                    parser.addInstruction(instruction);
                    parser.addLabelEnd((String)id);
                    RESULT = instruction;
                :}
                |
                    I_TYPE:op REGISTER:rt INTEGER_LITERAL:imm REGISTER:rs
                {:
                    Instruction instruction = parser.constructIType(op, rs, rt, imm);
                    parser.addInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    I_TYPE:op REGISTER:rt IDENT:id
                {:
                    Instruction instruction = parser.constructIType(op, new Integer(0), rt, new Integer(0));
                    parser.addInstruction(instruction);
                    parser.addLabelEnd((String)id);
                    RESULT = instruction;
                :}
                |
                    I_TYPE:op REGISTER:rt INTEGER_LITERAL:imm
                {:
                    Instruction instruction = parser.constructIType(op, new Integer(0), rt, (Integer)imm);
                    parser.addInstruction(instruction);
                    RESULT = instruction;
                :}
                ;
j_expr ::=          J_TYPE:op INTEGER_LITERAL:addr
                {:  Instruction instruction = parser.constructJType(op, addr);
                    parser.addInstruction(instruction);
                    RESULT = instruction;
                :}
                |
                    J_TYPE:op IDENT:id
                {:  Instruction instruction = parser.constructJType(op, new Integer(0));
                    parser.addInstruction(instruction);
                    parser.addLabelEnd((String)id);
                    RESULT = instruction;
                :}
                ;
decl_list ::=       decl_list decl
                |
                ;
decl ::=            LABEL:lab TYPE:type STRING_LITERAL:str EOL
                {: parser.constructDeclaration((String)lab, type, str); :}
                ;